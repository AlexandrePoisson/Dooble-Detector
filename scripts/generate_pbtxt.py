# generate label_map.pbtxt

# Scan the test picture folders, and create a pbtxt file

import os
import glob
import pandas as pd
import argparse
import xml.etree.ElementTree as ET



def xml_to_label_map(path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and create label_map

    Parameters:
    ----------
    path : {str}
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """
    labels = {}
    label_list = []
    for xml_file in glob.glob(path + '/*.xml'):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        for member in root.findall('object/name'):
            value = member.text
            label_list.append(value)
    return label_list



def main():
    # Initiate argument parser
    parser = argparse.ArgumentParser(
        description="Sample TensorFlow XML-to-CSV converter")
    parser.add_argument("-i",
                        "--inputDir",
                        help="Path to the folder where the input .xml files are stored",
                        type=str)
    parser.add_argument("-o",
                        "--outputFile",
                        help="Name of label_map.pbtxt", type=str)
    args = parser.parse_args()

    if(args.inputDir is None):
        args.inputDir = os.getcwd()
    if(args.outputFile is None):
        args.outputFile = args.inputDir + "/label_map.pbtxt"

    assert(os.path.isdir(args.inputDir))

    label_list = xml_to_label_map(args.inputDir)
    for item in sorted(set(label_list)):
        print("item {} : # {}".format(item, label_list.count(item)))
    with open(args.outputFile,'w') as output_file:
        i = 1
        for item in sorted(set(label_list)):
            output_file.write("item\n {")
            output_file.write("    id : {}\n".format(i))
            output_file.write("    name : '{}'\n".format(item))
            output_file.write("}\n")
            i+=1


    print('Successfully converted xml to label_map.pbtxt')


if __name__ == '__main__':
    main()
"""
item {
    id: 1
    name: 'cat'
}

item {
    id: 2
    name: 'dog'
}

"""